import {HttpException, HttpStatus, Injectable, Logger} from '@nestjs/common';
import {createHmac} from 'crypto';
import {UsersSchema} from '@remnawave/backend-contract';
import {z} from 'zod';
import {BotService} from '@modules/bot/bot.service';

@Injectable()
export class WebhookService {
    private readonly logger = new Logger(WebhookService.name);

    constructor(
        private readonly botService: BotService,
    ) {
    }

    verifySignature(body: any, signature: string, secret: string): boolean {
        const computed = createHmac('sha256', secret)
            .update(JSON.stringify(body))
            .digest('hex');

        return computed === signature;
    }

    async handleEvent(event: string, data: any) {
        this.logger.log(`Received webhook event: ${event}`);

        const [type, name] = event.split('.');

        if (type === 'user') {
            const info: z.infer<typeof UsersSchema> = data;
            const tgId = info.telegramId;

            if (!tgId) {
                this.logger.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${info.username} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram`);
                return;
            }

            const messages: Record<string, string> = {
                // created: 'üéâ [SYSTEM] –í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!',
                // modified: 'üõ†Ô∏è [SYSTEM] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–π —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.',
                // deleted: '‚ùå [SYSTEM] –í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
                // revoked: 'üö´ [SYSTEM] –î–æ—Å—Ç—É–ø –∫ –ø–æ–¥–ø–∏—Å–∫–µ *–æ—Ç–æ–∑–≤–∞–Ω*. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                disabled: 'üîí [SYSTEM] –í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å *–æ—Ç–∫–ª—é—á–µ–Ω–∞*. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                enabled: '‚úÖ [SYSTEM] –í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å *–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                // limited: 'üìâ [SYSTEM] –í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å *–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞*. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.',
                expired: '‚åõ [SYSTEM] –í–∞—à–∞ *–ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.',
                // traffic_reset: 'üîÑ [SYSTEM] –í–∞—à —Ç—Ä–∞—Ñ–∏–∫ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.',
                expires_in_72_hours: '‚è≥ [SYSTEM] –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è *—á–µ—Ä–µ–∑ 3 –¥–Ω—è*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.',
                expires_in_48_hours: '‚è≥ [SYSTEM] –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è *—á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.',
                expires_in_24_hours: '‚ö†Ô∏è [SYSTEM] –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è *—á–µ—Ä–µ–∑ 24 —á–∞—Å–∞*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë.',
                // expired_24_hours_ago: 'üìÜ [SYSTEM] –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ *–∏—Å—Ç–µ–∫–ª–∞ 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥*. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø.',
                // first_connected: 'üîå [SYSTEM] –í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Ä–≤–∏—Å—É –≤–ø–µ—Ä–≤—ã–µ ‚Äî –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                // bandwidth_usage_threshold_reached: 'üìä [SYSTEM] –í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞.',
            };

            const message = messages[name];

            if (message) {
                await this.botService.sendMessage(tgId, message, {
                    parse_mode: 'Markdown',
                });
                return;
            }
        }

        this.logger.debug(`Unhandled event: ${event}`);
    }

    async handleUpdate(body: any) {
        try {
            await this.botService.handleUpdate(body);
        } catch (e) {
            throw new HttpException('Bad update', HttpStatus.BAD_REQUEST);
        }
    }
}

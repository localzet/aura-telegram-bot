import {CallbackQuery, Ctx, InjectBot, Update} from "@localzet/grammy-nestjs";
import {UseFilters, UseInterceptors} from "@nestjs/common";
import debug from "debug";
import {Bot, Context, InlineKeyboard} from "grammy";

import {BotName} from "@modules/bot/bot.constants";
import {ResponseTimeInterceptor} from "@common/interceptors";
import {GrammyExceptionFilter} from "@common/filters";
import {PrismaService} from "@common/services/prisma.service";
import {prettyLevel} from "@common/utils";
import {User, UserLevel} from "@prisma/client";
import {UserService} from "@common/services/user.service";

const log = debug("bot:referral");
const logError = debug("bot:referral:error");

@Update()
@UseInterceptors(ResponseTimeInterceptor)
@UseFilters(GrammyExceptionFilter)
export class ReferralService {
    constructor(
        @InjectBot(BotName)
        private readonly bot: Bot<Context>,
        private readonly prisma: PrismaService,
        private readonly userService: UserService,
    ) {
        log("ReferralService initialized");
    }

    private async getUserSafe(ctx: Context): Promise<User | null> {
        try {
            const {tg: user} = await this.userService.getUser(ctx);
            return user;
        } catch (error) {
            logError("Failed to get user from context:", error);
            return null;
        }
    }

    @CallbackQuery("ref")
    async onRef(@Ctx() ctx: Context): Promise<void> {
        try {
            const user = await this.getUserSafe(ctx);
            if (!user) {
                await ctx.answerCallbackQuery({
                    text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    show_alert: true,
                });
                return;
            }

            const startOfMonth = new Date();
            startOfMonth.setDate(1);
            startOfMonth.setHours(0, 0, 0, 0);

            const referredCountThisMonth = await this.prisma.referral.count({
                where: {inviterId: user.id, createdAt: {gte: startOfMonth}},
            });

            const monthlyReferralDiscount = Math.min(referredCountThisMonth * 5, 25);

            let totalDiscount = user.discount ?? 0;
            let note = "";

            switch (user.level) {
                case "ferrum":
                    totalDiscount = Math.min(totalDiscount + monthlyReferralDiscount, 25);
                    break;
                case "argentum":
                    totalDiscount = Math.min(
                        totalDiscount + 25 + monthlyReferralDiscount,
                        50,
                    );
                    break;
                case "aurum":
                    totalDiscount = Math.min(totalDiscount + 50, 100);
                    note = "(—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)";
                    break;
                case "platinum":
                    totalDiscount = 100;
                    note = "(–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ)";
                    break;
            }

            const refLink = `https://t.me/${this.bot.botInfo.username}?start=ref_${user.telegramId}`;
            const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(refLink)}&text=${encodeURIComponent(
                '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! –ü–æ–ª—É—á–∏ –±–æ–Ω—É—Å—ã –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ'
            )}`;

            const kb = new InlineKeyboard()
                .text('üìà –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ', 'my_refs')
                .url('üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', shareUrl)
                .row()

            if (['aurum', 'platinum'].includes(user.level)) {
                kb.text('üß≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'ref_manage');
            }
            kb.text('üìú –û–± —É—Ä–æ–≤–Ω—è—Ö', 'ref_levels');

            const persistDiscount: Record<UserLevel, string> = {
                platinum: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞—Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–µ–Ω, –Ω–∞–≤—Å–µ–≥–¥–∞ ü•≥\n\n<i>–ü–ª–∞—Ç–∏–Ω—É–º - –æ—Å–æ–±—ã–π —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏. –ú–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—ã - —á–∞—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üòé\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–æ 5 –¥—Ä—É–∑–µ–π –≤ "–ó–æ–ª–æ—Ç–æ–π" —É—Ä–æ–≤–µ–Ω—å, –¥–æ 10 - –≤ "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π". </i>',
                aurum: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–∞—à–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 50% ü•≥',
                argentum: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–∞—à–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 25% ü•≥\n –ò –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ—é —Å–∫–∏–¥–∫—É –¥–æ 50%, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π (–ø–æ 5% –∑–∞ –¥—Ä—É–≥–∞)',
                ferrum: '–≠—Ç–æ –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ—é —Å–∫–∏–¥–∫—É –¥–æ 25%, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π (–ø–æ 5% –∑–∞ –¥—Ä—É–≥–∞)',
            };

            await ctx.answerCallbackQuery();
            await ctx.editMessageText(
                `üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å:

–í–∞—à —É—Ä–æ–≤–µ–Ω—å: <b>${prettyLevel(user.level)}</b>
${persistDiscount[user.level]}

üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>${refLink}</code>
üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: <code>${referredCountThisMonth}</code>
üìâ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: <code>${totalDiscount}%</code> ${note}

<i>–í–∞–∂–Ω–æ! –°–∫–∏–¥–∫–∞ –¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ –¥—Ä—É–∑–µ–π, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ (–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è)</i>`,
                {reply_markup: kb, parse_mode: 'HTML'},
            );

            log(`onRef: user ${user.telegramId} viewed referral info`);
        } catch (error) {
            logError("onRef error:", error);
            await ctx.answerCallbackQuery({
                text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                show_alert: true,
            });
        }
    }

    @CallbackQuery("ref_levels")
    async onRefLevels(@Ctx() ctx: Context): Promise<void> {
        const description =
            "\n–í Aura Network –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É. " +
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π, –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –≤–∞—à–∞ —Å–∫–∏–¥–∫–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n";

        const levels = `
<b>–ó–æ–ª–æ—Ç–æ–π:</b>
- –°–∫–∏–¥–∫–∞ 50% –Ω–∞–≤—Å–µ–≥–¥–∞
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–æ 10 –¥—Ä—É–∑–µ–π –≤ "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π" —É—Ä–æ–≤–µ–Ω—å
‚ÑπÔ∏è –ú–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –≤ –≤–∏–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞

<b>–°–µ—Ä–µ–±—Ä—è–Ω—ã–π:</b>
- –°–∫–∏–¥–∫–∞ 25% –Ω–∞–≤—Å–µ–≥–¥–∞
- +5% —Å–∫–∏–¥–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –¥–æ 25% (—Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–∏–¥–∫–æ–π)
‚ÑπÔ∏è –ú–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –∏–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

<b>–ë–∞–∑–æ–≤—ã–π:</b>
- +5% —Å–∫–∏–¥–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –¥–æ 25%
‚ÑπÔ∏è –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
`;

        const kb = new InlineKeyboard().text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "ref");

        await ctx.answerCallbackQuery();
        await ctx.editMessageText(`${description}\n${levels}`, {
            reply_markup: kb,
            parse_mode: "HTML",
        });
    }

    @CallbackQuery("my_refs")
    async onMyRefs(@Ctx() ctx: Context): Promise<void> {
        try {
            const user = await this.getUserSafe(ctx);
            if (!user) {
                await ctx.answerCallbackQuery({
                    text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    show_alert: true,
                });
                return;
            }

            const referrals = await this.prisma.referral.findMany({
                where: {inviterId: user.id},
                include: {invited: true},
                orderBy: {createdAt: "desc"},
                take: 20,
            });

            if (!referrals.length) {
                await ctx.answerCallbackQuery("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
                log(`onMyRefs: user ${user.telegramId} has no referrals`);
                return;
            }

            const text =
                "üìã –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:\n\n" +
                referrals
                    .map((ref) => {
                        const i = ref.invited;
                        return `‚Ä¢ ${i.fullName || i.username || i.telegramId} (${prettyLevel(i.level)})`;
                    })
                    .join("\n");

            await ctx.answerCallbackQuery();
            await ctx.editMessageText(text);

            log(`onMyRefs: listed referrals for user ${user.telegramId}`);
        } catch (error) {
            logError("onMyRefs error:", error);
            await ctx.answerCallbackQuery({
                text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö",
                show_alert: true,
            });
        }
    }

    @CallbackQuery("ref_manage")
    async onRefManage(@Ctx() ctx: Context): Promise<void> {
        try {
            const user = await this.getUserSafe(ctx);
            if (!user) {
                await ctx.answerCallbackQuery({
                    text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    show_alert: true,
                });
                return;
            }

            if (!["aurum", "platinum"].includes(user.level)) {
                await ctx.answerCallbackQuery({text: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è"});
                log(`onRefManage: access denied for user ${user.telegramId}`);
                return;
            }

            const referrals = await this.prisma.referral.findMany({
                where: {inviterId: user.id},
                include: {invited: true},
                orderBy: {createdAt: "desc"},
                take: 20,
            });

            const kb = new InlineKeyboard();

            for (const ref of referrals) {
                const invited = ref.invited;
                kb.text(
                    `üéì ${invited.fullName || invited.username || invited.telegramId}`,
                    `promote_${invited.telegramId}`,
                ).row();
            }

            const remainingArgentum = 10 - (user.grantedArgentum ?? 0);
            const remainingAurum =
                user.level === "platinum" ? 5 - (user.grantedAurum ?? 0) : 10;

            const limits =
                user.level === "platinum"
                    ? `ü•á –ó–æ–ª–æ—Ç—ã–µ: ${remainingAurum} / 5\nü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–µ: ${remainingArgentum} / 10`
                    : `ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–µ: ${remainingArgentum} / 10`;

            await ctx.answerCallbackQuery();
            await ctx.editMessageText(
                `üß≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:

–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.

${limits}

üéì –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∏–∂–µ:
`,
                {reply_markup: kb},
            );

            log(`onRefManage: management panel shown for user ${user.telegramId}`);
        } catch (error) {
            logError("onRefManage error:", error);
            await ctx.answerCallbackQuery({
                text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                show_alert: true,
            });
        }
    }

    @CallbackQuery(/^promote_(\d+)$/)
    async onPromote(@Ctx() ctx: Context): Promise<void> {
        try {
            const user = await this.getUserSafe(ctx);
            if (!user) {
                await ctx.answerCallbackQuery({
                    text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    show_alert: true,
                });
                return;
            }

            const match = ctx.callbackQuery?.data?.match(/^promote_(\d+)$/);
            const targetTelegramId = match?.[1] ? Number(match[1]) : null;
            if (!targetTelegramId) return;

            log(
                `@promote ‚Äî inviter: ${user.telegramId}, target: ${targetTelegramId}`,
            );

            const target = await this.prisma.user.findUnique({
                where: {telegramId: targetTelegramId},
            });

            if (!target || !["aurum", "platinum"].includes(user.level)) {
                await ctx.answerCallbackQuery({
                    text: "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è",
                    show_alert: true,
                });
                return;
            }

            const referral = await this.prisma.referral.findUnique({
                where: {
                    inviterId_invitedId: {inviterId: user.id, invitedId: target.id},
                },
            });

            if (!referral) {
                await ctx.answerCallbackQuery({
                    text: "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º",
                    show_alert: true,
                });
                return;
            }

            const buildButtons = (buttons: { text: string; data: string }[]) => ({
                inline_keyboard: buttons.map((btn) => [
                    {text: btn.text, callback_data: btn.data},
                ]),
            });

            await ctx.answerCallbackQuery();

            if (user.level === "platinum") {
                await ctx.editMessageText(
                    `–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${target.fullName || target.username || target.telegramId}</b>:`,
                    {
                        parse_mode: "HTML",
                        reply_markup: buildButtons([
                            {text: "ü•á –ó–æ–ª–æ—Ç–æ–π", data: `grant_${targetTelegramId}_aurum`},
                            {
                                text: "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π",
                                data: `grant_${targetTelegramId}_argentum`,
                            },
                            {text: "ü•â –ë–∞–∑–æ–≤—ã–π", data: `grant_${targetTelegramId}_ferrum`},
                        ]),
                    },
                );
                return;
            }

            if (user.level === "aurum") {
                await ctx.editMessageText(
                    `–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${target.fullName || target.username || target.telegramId}</b>:`,
                    {
                        parse_mode: "HTML",
                        reply_markup: buildButtons([
                            {
                                text: "ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π",
                                data: `grant_${targetTelegramId}_argentum`,
                            },
                            {text: "ü•â –ë–∞–∑–æ–≤—ã–π", data: `grant_${targetTelegramId}_ferrum`},
                        ]),
                    },
                );
                return;
            }
        } catch (error) {
            logError("onPromote error:", error);
            await ctx.answerCallbackQuery({
                text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è",
                show_alert: true,
            });
        }
    }

    @CallbackQuery(/^grant_(\d+)_(ferrum|argentum|aurum)$/)
    async changeUserLevel(@Ctx() ctx: Context): Promise<void> {
        try {
            const user = await this.getUserSafe(ctx);
            if (!user) {
                await ctx.answerCallbackQuery({
                    text: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    show_alert: true,
                });
                return;
            }

            const match = ctx.callbackQuery?.data?.match(
                /^grant_(\d+)_(ferrum|argentum|aurum)$/,
            );
            if (!match) {
                await ctx.answerCallbackQuery({
                    text: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    show_alert: true,
                });
                return;
            }

            const targetTelegramId = Number(match[1]);
            const newLevel = match[2] as UserLevel;

            const targetUser = await this.prisma.user.findUnique({
                where: {telegramId: targetTelegramId},
            });
            if (!targetUser) {
                await ctx.answerCallbackQuery({
                    text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    show_alert: true,
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            if (!["aurum", "platinum"].includes(user.level)) {
                await ctx.answerCallbackQuery({
                    text: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è",
                    show_alert: true,
                });
                return;
            }

            // –õ–æ–≥–∏–∫–∞ –ª–∏–º–∏—Ç–æ–≤: platinum –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç—å aurum (5), argentum (10)
            // aurum ‚Äî —Ç–æ–ª—å–∫–æ argentum (10)
            if (user.level === "aurum" && newLevel === "aurum") {
                await ctx.answerCallbackQuery({
                    text: "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å",
                    show_alert: true,
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
            const grantedField =
                newLevel === "aurum" ? "grantedAurum" : "grantedArgentum";
            const maxLimit =
                newLevel === "aurum" ? (user.level === "platinum" ? 5 : 0) : 10;
            const grantedCount = user[grantedField] ?? 0;

            if (grantedCount >= maxLimit) {
                await ctx.answerCallbackQuery({
                    text: `–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —É—Ä–æ–≤–Ω—è ${prettyLevel(newLevel)}`,
                    show_alert: true,
                });
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.prisma.user.update({
                where: {telegramId: targetTelegramId},
                data: {level: newLevel},
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —É inviter
            const updateData: Partial<User> = {};
            updateData[grantedField] = grantedCount + 1;

            await this.prisma.user.update({
                where: {id: user.id},
                data: updateData,
            });

            await ctx.answerCallbackQuery({
                text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Ä–æ–≤–µ–Ω—å ${prettyLevel(newLevel)}`,
            });

            await ctx.editMessageText(
                `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${targetUser.fullName || targetUser.username || targetUser.telegramId}</b> —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω —É—Ä–æ–≤–µ–Ω—å <b>${prettyLevel(newLevel)}</b>.`,
                {parse_mode: "HTML"},
            );

            log(
                `User ${user.telegramId} granted level ${newLevel} to ${targetTelegramId}`,
            );
        } catch (error) {
            logError("changeUserLevel error:", error);
            await ctx.answerCallbackQuery({
                text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è",
                show_alert: true,
            });
        }
    }
}

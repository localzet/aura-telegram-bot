import {CallbackQuery, Ctx, InjectBot, Update,} from '@localzet/grammy-nestjs'
import {UseFilters, UseInterceptors} from '@nestjs/common'
import debug from 'debug'
import {Bot, Context, InlineKeyboard} from 'grammy'

import {BotName} from "@modules/bot/bot.constants";
import {ResponseTimeInterceptor} from "@common/interceptors";
import {GrammyExceptionFilter} from "@common/filters";
import {PrismaService} from "@common/services/prisma.service";
import {prettyLevel} from "@common/utils";
import {User, UserLevel} from "@prisma/client";
import {UserService} from "@common/services/user.service";

const log = debug('bot:referral')

@Update()
@UseInterceptors(ResponseTimeInterceptor)
@UseFilters(GrammyExceptionFilter)
export class ReferralService {
    constructor(
        @InjectBot(BotName)
        private readonly bot: Bot<Context>,
        private prisma: PrismaService,
        private user: UserService,
    ) {
        log('ReferralService initialized');
    }

    @CallbackQuery('ref')
    async onRef(@Ctx() ctx: Context): Promise<any> {
        const {tg: user} = await this.user.getUser(ctx)

        const startOfMonth = new Date();
        startOfMonth.setDate(1);
        startOfMonth.setHours(0, 0, 0, 0);

        const referredCountThisMonth = await this.prisma.referral.count({
            where: {
                inviterId: user.id,
                createdAt: {gte: startOfMonth},
            },
        });

        const monthlyReferralDiscount = Math.min(referredCountThisMonth * 5, 25);

        let totalDiscount = user.discount ?? 0;
        let note = '';

        switch (user.level) {
            case 'ferrum':
                totalDiscount = Math.min(totalDiscount + monthlyReferralDiscount, 25);
                break;
            case 'argentum':
                totalDiscount = Math.min(totalDiscount + 25 + monthlyReferralDiscount, 50);
                break;
            case 'aurum':
                totalDiscount = Math.min(totalDiscount + 50, 100);
                note = '(—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)';
                break;
            case 'platinum':
                totalDiscount = 100;
                note = '(–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ)';
                break;
        }

        const refLink = `https://t.me/${this.bot.botInfo.username}?start=ref_${user.telegramId}`;

        const kb = new InlineKeyboard()
            .text('üìà –ú–æ–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ', 'my_refs');

        if (['aurum', 'platinum'].includes(user.level)) {
            kb.text('üß≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º', 'ref_manage');
        }

        const description = "\n–í Aura Network –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É. " +
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π, –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –≤–∞—à–∞ —Å–∫–∏–¥–∫–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n"

        const levels = `
        <b>–ó–æ–ª–æ—Ç–æ–π:</b>
        - –°–∫–∏–¥–∫–∞ 50% –Ω–∞–≤—Å–µ–≥–¥–∞
        - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–æ 10 –¥—Ä—É–∑–µ–π –≤ "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π" —É—Ä–æ–≤–µ–Ω—å
        ‚ÑπÔ∏è –ú–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –≤ –≤–∏–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        
        <b>–°–µ—Ä–µ–±—Ä—è–Ω—ã–π:</b>
        - –°–∫–∏–¥–∫–∞ 25% –Ω–∞–≤—Å–µ–≥–¥–∞
        - +5% —Å–∫–∏–¥–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –¥–æ 25% (—Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–∏–¥–∫–æ–π)
        ‚ÑπÔ∏è –ú–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–ª–∏ –∏–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        
        <b>–ë–∞–∑–æ–≤—ã–π:</b>
        - +5% —Å–∫–∏–¥–∫–∏ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –¥–æ 25%
        ‚ÑπÔ∏è –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        `
        const persistDiscount: Record<UserLevel, string> = {
            'platinum': `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞—Å –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–µ–Ω, –Ω–∞–≤—Å–µ–≥–¥–∞ ü•≥
            –ü–ª–∞—Ç–∏–Ω—É–º - –æ—Å–æ–±—ã–π —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏. –ú–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—ã - —á–∞—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ üòé
            –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–æ 5 –¥—Ä—É–∑–µ–π –≤ "–ó–æ–ª–æ—Ç–æ–π" —É—Ä–æ–≤–µ–Ω—å, –¥–æ 10 - –≤ "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π". 
            `,
            'aurum': `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤–∞—à–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ - 50% ü•≥
            `,
            ferrum: '',
            argentum: ''
        }
        await ctx.answerCallbackQuery();
        await ctx.editMessageText(`üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å:
        ${description ?? ''}
        –í–∞—à —É—Ä–æ–≤–µ–Ω—å:<code> </code><b>${prettyLevel(user.level)}</b>
        ${persistDiscount[user.level]}
        –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—Ä–æ–≤–Ω–µ–π:
        ${levels}
        
        
        üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <code>${refLink}</code>
        üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî –ø–æ 5% —Å–∫–∏–¥–∫–∏ (–¥–æ 25%)
        üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: <code>${referredCountThisMonth}</code>
        üìâ –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: <code>${totalDiscount}%</code> ${note}
        
        <i>–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</i>
        `, {
            reply_markup: kb,
            parse_mode: 'HTML'
        });

        log(`onRef: user ${user.telegramId} viewed referral info`);
    }

    @CallbackQuery('my_refs')
    async onMyRefs(@Ctx() ctx: Context): Promise<any> {
        const {tg: user} = await this.user.getUser(ctx)

        const referrals = await this.prisma.referral.findMany({
            where: {inviterId: user.id},
            include: {invited: true},
            orderBy: {createdAt: 'desc'},
            take: 20,
        });

        if (!referrals.length) {
            await ctx.answerCallbackQuery('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
            log(`onMyRefs: user ${user.telegramId} has no referrals`);
            return;
        }

        let text = `üìã –í–∞—à–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ:\n\n`;
        for (const ref of referrals) {
            const i = ref.invited;
            text += `‚Ä¢ ${i.fullName || i.username || i.telegramId} (${prettyLevel(i.level)})\n`;
        }

        await ctx.answerCallbackQuery();
        await ctx.editMessageText(text);
        log(`onMyRefs: listed referrals for user ${user.telegramId}`);
    }

    @CallbackQuery('ref_manage')
    async onRefManage(@Ctx() ctx: Context): Promise<any> {
        const {tg: user} = await this.user.getUser(ctx)

        if (!['aurum', 'platinum'].includes(user.level)) {
            await ctx.answerCallbackQuery({text: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è'});
            log(`onRefManage: access denied for user ${user.telegramId}`);
            return;
        }

        const referrals = await this.prisma.referral.findMany({
            where: {inviterId: user.id},
            include: {invited: true},
            orderBy: {createdAt: 'desc'},
            take: 20,
        });

        const kb = new InlineKeyboard();

        for (const ref of referrals) {
            const invited = ref.invited;
            kb.text(`üéì ${invited.fullName || invited.username || invited.telegramId}`, `promote_${invited.telegramId}`).row();
        }

        const remainingArgentum = 10 - (user.grantedArgentum ?? 0);
        const remainingAurum = user.level === 'platinum' ? 5 - (user.grantedAurum ?? 0) : 10;

        let limits = '';
        if (user.level === 'platinum') {
            limits = `ü•á –ó–æ–ª–æ—Ç—ã–µ: ${remainingAurum} / 5\nü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–µ: ${remainingArgentum} / 10`;
        } else {
            limits = `ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–µ: ${remainingArgentum} / 10`;
        }

        await ctx.answerCallbackQuery();
        await ctx.editMessageText(
            `üß≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:

–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö.

${limits}

üéì –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∏–∂–µ:
`,
            {reply_markup: kb},
        );
        log(`onRefManage: management panel shown for user ${user.telegramId}`);
    }

    @CallbackQuery(/^promote_(\d+)$/)
    async onPromote(@Ctx() ctx: Context): Promise<any> {
        const {tg: inviter} = await this.user.getUser(ctx)

        const match = ctx.callbackQuery?.data?.match(/^promote_(\d+)$/);
        const targetTelegramId = match?.[1] ? Number(match[1]) : null;
        if (!targetTelegramId) return;

        log(`@promote ‚Äî inviter: ${inviter.telegramId}, target: ${targetTelegramId}`);

        const target = await this.prisma.user.findUnique({where: {telegramId: targetTelegramId}});

        if (!inviter || !target || !['aurum', 'platinum'].includes(inviter.level)) {
            return ctx.answerCallbackQuery({
                text: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è',
                show_alert: true,
            });
        }

        const referral = await this.prisma.referral.findUnique({
            where: {
                inviterId_invitedId: {
                    inviterId: inviter.id,
                    invitedId: target.id,
                },
            },
        });
        if (!referral) {
            return ctx.answerCallbackQuery({
                text: '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º',
                show_alert: true,
            });
        }

        if (inviter.level === 'platinum') {
            return ctx.editMessageText(
                `–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${target.fullName || target.username || target.telegramId}</b>:`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: 'ü•á –ó–æ–ª–æ—Ç–æ–π', callback_data: `grant_${targetTelegramId}_aurum`}],
                            [{text: 'ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π', callback_data: `grant_${targetTelegramId}_argentum`}],
                            [{text: 'ü•â –ë–∞–∑–æ–≤—ã–π', callback_data: `grant_${targetTelegramId}_ferrum`}],
                        ],
                    },
                }
            );
        }

        if (inviter.level === 'aurum') {
            return ctx.editMessageText(
                `–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>${target.fullName || target.username || target.telegramId}</b>:`,
                {
                    parse_mode: 'HTML',
                    reply_markup: {
                        inline_keyboard: [
                            [{text: 'ü•à –°–µ—Ä–µ–±—Ä—è–Ω—ã–π', callback_data: `grant_${targetTelegramId}_argentum`}],
                            [{text: 'ü•â –ë–∞–∑–æ–≤—ã–π', callback_data: `grant_${targetTelegramId}_ferrum`}],
                        ],
                    },
                }
            );
        }
    }

    @CallbackQuery(/^grant_(\d+)_(\w+)$/)
    async onGrantLevel(@Ctx() ctx: Context): Promise<any> {
        const {tg: inviter} = await this.user.getUser(ctx)

        const [, rawTargetId, newLevel] = ctx.callbackQuery?.data?.split('_') || [];
        const targetTelegramId = Number(rawTargetId);

        log(`@grantLevel ‚Äî inviter: ${inviter.telegramId}, target: ${targetTelegramId}, level: ${newLevel}`);

        const target = await this.prisma.user.findUnique({where: {telegramId: targetTelegramId}});

        if (!inviter || !target || !['aurum', 'platinum'].includes(inviter.level)) {
            return ctx.answerCallbackQuery({
                text: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è',
                show_alert: true,
            });
        }

        const referral = await this.prisma.referral.findUnique({
            where: {
                inviterId_invitedId: {
                    inviterId: inviter.id,
                    invitedId: target.id,
                },
            },
        });

        if (!referral) {
            return ctx.answerCallbackQuery({
                text: '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º',
                show_alert: true
            });
        }

        return this.changeUserLevel(ctx, inviter, target, newLevel as any);
    }

    private async changeUserLevel(
        ctx: Context,
        inviter: User,
        target: User,
        targetLevel: 'ferrum' | 'argentum' | 'aurum'
    ): Promise<any> {
        const previousLevel = target.level;
        const validLevels = ['ferrum', 'argentum', 'aurum', 'platinum'] as const;

        if (previousLevel === targetLevel) {
            return ctx.answerCallbackQuery({text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ', show_alert: true});
        }

        if (!validLevels.includes(targetLevel)) {
            return ctx.answerCallbackQuery({text: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å', show_alert: true});
        }

        const isPromote = validLevels.indexOf(targetLevel) > validLevels.indexOf(previousLevel);
        const isDemote = !isPromote;

        const levelField = targetLevel === 'aurum' ? 'grantedAurum'
            : targetLevel === 'argentum' ? 'grantedArgentum'
                : null;

        const previousField = previousLevel === 'aurum' ? 'grantedAurum'
            : previousLevel === 'argentum' ? 'grantedArgentum'
                : null;

        const updates: any[] = [];

        if (isPromote && levelField) {
            const limits = {grantedAurum: 5, grantedArgentum: 10};
            const granted = inviter[levelField] ?? 0;
            const limit = limits[levelField];
            if (granted >= limit) {
                return ctx.answerCallbackQuery({
                    text: `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ (${limit}) –ø–æ ${prettyLevel(targetLevel)}`,
                    show_alert: true,
                });
            }
            updates.push(this.prisma.user.update({
                where: {id: inviter.id},
                data: {[levelField]: {increment: 1}},
            }));

            if (previousField) {
                updates.push(this.prisma.user.update({
                    where: {id: inviter.id},
                    data: {[previousField]: {decrement: 1}},
                }));
            }
        }

        if (isDemote && previousField) {
            if (levelField) {
                const limits = {grantedAurum: 5, grantedArgentum: 10};
                const granted = inviter[levelField] ?? 0;
                const limit = limits[levelField];
                if (granted >= limit) {
                    return ctx.answerCallbackQuery({
                        text: `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ (${limit}) –ø–æ ${prettyLevel(targetLevel)}`,
                        show_alert: true,
                    });
                }
                updates.push(this.prisma.user.update({
                    where: {id: inviter.id},
                    data: {[levelField]: {increment: 1}},
                }));
            }
            updates.push(this.prisma.user.update({
                where: {id: inviter.id},
                data: {[previousField]: {decrement: 1}},
            }));
        }

        updates.push(this.prisma.user.update({
            where: {id: target.id},
            data: {level: targetLevel},
        }));

        await this.prisma.$transaction(updates);

        log(`@changeUserLevel ‚Äî ${target.telegramId} ${previousLevel} ‚Üí ${targetLevel}`);

        await this.bot.api.sendMessage(
            target.telegramId,
            `üîî –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${prettyLevel(targetLevel)}</b>`,
            {parse_mode: 'HTML'}
        );

        await ctx.editMessageText(
            `‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>${target.fullName || target.username || target.telegramId}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>${prettyLevel(targetLevel)}</b>.`,
            {parse_mode: 'HTML'}
        );
    }
}
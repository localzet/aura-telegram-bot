import {CallbackQuery, Ctx, InjectBot, On, Update,} from "@localzet/grammy-nestjs";
import {Logger, UseFilters, UseInterceptors} from "@nestjs/common";
import {Bot, Context, InlineKeyboard} from "grammy";
import {BotName} from "@modules/bot/bot.constants";
import {ResponseTimeInterceptor} from "@common/interceptors";
import {GrammyExceptionFilter} from "@common/filters";
import {PrismaService} from "@common/services/prisma.service";
import {getPrise} from "@common/utils/discount";
import {ConfigService} from "@nestjs/config";
import {UserService} from "@common/services/user.service";

@Update()
@UseInterceptors(ResponseTimeInterceptor)
@UseFilters(GrammyExceptionFilter)
export class BuyService {
    private readonly logger = new Logger(BuyService.name);

    constructor(
        @InjectBot(BotName)
        private readonly bot: Bot<Context>,
        private readonly config: ConfigService,
        private readonly prisma: PrismaService,
        private readonly user: UserService,
    ) {
    }

    @CallbackQuery("buy")
    async onBuy(@Ctx() ctx: Context): Promise<void> {
        try {
            const {tg: user} = await this.user.getUser(ctx);

            await ctx.answerCallbackQuery();
            await ctx.editMessageText(
                `üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:
<code>
1 –º–µ—Å—è—Ü     ${this.calcPrice(1)}—Ä
3 –º–µ—Å—è—Ü–∞    ${this.calcPrice(3)}—Ä (-15%)
6 –º–µ—Å—è—Ü–µ–≤   ${this.calcPrice(6)}—Ä (-20%)
12 –º–µ—Å—è—Ü–µ–≤  ${this.calcPrice(12)}—Ä (-25%)
</code>
üéÅ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: ${user.discount}%
        `,
                {
                    reply_markup: new InlineKeyboard()
                        .text("1 –º–µ—Å—è—Ü", "buy_plan_1")
                        .text("3 –º–µ—Å—è—Ü–∞", "buy_plan_3")
                        .row()
                        .text("6 –º–µ—Å—è—Ü–µ–≤", "buy_plan_6")
                        .text("12 –º–µ—Å—è—Ü–µ–≤", "buy_plan_12")
                        .row()
                        .text("–ù–∞–∑–∞–¥", "back_to_main"),
                    parse_mode: "HTML",
                },
            );
        } catch (err: any) {
            this.logger.error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤: ${err.message}`,
                err.stack,
            );
            await this.notifyDev(`üí• –û—à–∏–±–∫–∞ pre_checkout
<b>User:</b> ${ctx.from?.id}
<pre>${err.message}</pre>`);
            await ctx.reply(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            );
        }
    }

    @CallbackQuery(/^buy_plan_(\d+)$/)
    async onPlanSelect(@Ctx() ctx: Context): Promise<void> {
        try {
            const months = Number(ctx.match?.[1]);
            if (!months) return;

            const {tg: user} = await this.user.getUser(ctx);
            const price = await getPrise(months, user, this.prisma);

            await ctx.answerCallbackQuery();

            const purchase = await this.prisma.purchase.create({
                data: {
                    userId: user.id,
                    type: "yookasa",
                    status: "new",
                    amount: price,
                    currency: "RUB",
                    month: months,
                },
            });

            await this.bot.api.sendInvoice(
                user.telegramId,
                `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${months} –º–µ—Å`,
                "–ó–∞—â–∏—Ç–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
                purchase.id,
                "RUB",
                [
                    {
                        label: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${months} –º–µ—Å`,
                        amount: price * 100,
                    },
                ],
                {
                    provider_token: this.config.getOrThrow<string>("YOOKASSA_TOKEN"),
                    protect_content: true,
                },
            );
        } catch (err: any) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞: ${err.message}`, err.stack);
            await this.notifyDev(`üí• –û—à–∏–±–∫–∞ pre_checkout
<b>User:</b> ${ctx.from?.id}
<pre>${err.message}</pre>`);
            await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    @On("pre_checkout_query")
    async checkout(@Ctx() ctx: Context): Promise<void> {
        try {
            await this.user.getUser(ctx);

            const payload = ctx.preCheckoutQuery?.invoice_payload;
            const purchase = await this.prisma.purchase.findUnique({
                where: {id: payload},
            });

            if (!purchase || purchase.status !== "new") {
                await ctx.answerPreCheckoutQuery(false, {
                    error_message: "–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω",
                });
                return;
            }

            const {aura: auraUser} = await this.user.getUser(ctx);
            const months = purchase?.month;
            if (!months) {
                this.logger.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ ${payload}`);
                return;
            }

            const success = auraUser
                ? await this.extendSubscription(ctx, auraUser.expireAt, months)
                : await this.createSubscription(ctx, months);

            if (!success) {
                const errMsg = `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Aura
<b>User:</b> ${ctx.from?.id}
<b>Purchase:</b> ${purchase.id}
<b>Months:</b> ${months}`;
                await this.notifyDev(errMsg);

                await ctx.answerPreCheckoutQuery(false, {
                    error_message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                });
                return;
            }

            await this.prisma.purchase.update({
                where: {id: purchase.id},
                data: {status: "pending"},
            });
            await ctx.answerPreCheckoutQuery(true);
        } catch (err: any) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ pre_checkout: ${err.message}`, err.stack);
            await this.notifyDev(`üí• –û—à–∏–±–∫–∞ pre_checkout
<b>User:</b> ${ctx.from?.id}
<pre>${err.message}</pre>`);
            await ctx.answerPreCheckoutQuery(false, {
                error_message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            });
        }
    }

    @On("message:successful_payment")
    async successfulPayment(@Ctx() ctx: Context): Promise<void> {
        try {
            const {aura: auraUser, tg: user} = await this.user.getUser(ctx);
            const payment = ctx.message?.successful_payment;

            await this.prisma.purchase.update({
                where: {id: payment?.invoice_payload},
                data: {
                    status: "paid",
                    telegramId: payment?.telegram_payment_charge_id,
                    yookasaId: payment?.provider_payment_charge_id,
                    paidAt: new Date(),
                },
            });

            const ref = await this.prisma.referral.findUnique({
                where: {invitedId: user.id},
                include: {inviter: true}
            });
            if (ref) {
                await this.bot.api.sendMessage(
                    ref.inviter.telegramId,
                    `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${user.fullName || user.username || user.telegramId}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!`,
                    {parse_mode: "HTML"},
                );
            }

            const expireDate = auraUser?.expireAt
                ? new Date(auraUser.expireAt)
                : null;

            if (expireDate) {
                await ctx.reply(
                    `‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${expireDate.toLocaleDateString("ru-RU")}`,
                );
            } else {
                await this
                    .notifyDev(`‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
<b>User:</b> ${ctx.from?.id}
<b>Purchase:</b> ${payment?.invoice_payload}`);

                await ctx.reply(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ Aura Continental",
                );
            }
        } catch (err: any) {
            this.logger.error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${err.message}`,
                err.stack,
            );
            await this.notifyDev(`üí• –û—à–∏–±–∫–∞ pre_checkout
<b>User:</b> ${ctx.from?.id}
<pre>${err.message}</pre>`);
            await ctx.reply(
                "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —Ä–µ—à–∏–º –≤–æ–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            );
        }
    }

    private calcPrice(months: number): number {
        const base = 180;
        const discount =
            months >= 12 ? 0.75 : months >= 6 ? 0.8 : months >= 3 ? 0.85 : 1;
        return base * months * discount;
    }

    private async extendSubscription(
        ctx: Context,
        expireAt: Date | null,
        months: number,
    ): Promise<Date | null> {
        const today = this.today();
        const current = expireAt ? new Date(expireAt) : today;
        const base = current > today ? current : today;
        const ends = new Date(base);
        ends.setMonth(ends.getMonth() + months);

        return (await this.user.updateAuraUser(ctx, ends)) ? ends : null;
    }

    private async createSubscription(
        ctx: Context,
        months: number,
    ): Promise<Date | null> {
        const today = this.today();
        const ends = new Date(today);
        ends.setMonth(ends.getMonth() + months);
        return (await this.user.createAuraUser(ctx, ends)) ? ends : null;
    }

    private today(): Date {
        const now = new Date();
        return new Date(now.getFullYear(), now.getMonth(), now.getDate());
    }

    private async notifyDev(message: string): Promise<void> {
        try {
            const adminId = this.config.getOrThrow<number>("ADMIN_TG_ID");
            if (!adminId) {
                this.logger.warn(
                    "ADMIN_TG_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                );
                return;
            }
            await this.bot.api.sendMessage(adminId, message, {parse_mode: "HTML"});
        } catch (e: any) {
            this.logger.error(
                `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É: ${e.message}`,
                e.stack,
            );
        }
    }
}

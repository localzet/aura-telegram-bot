import {ChatType, Ctx, InjectBot, Start, Update,} from '@localzet/grammy-nestjs'
import {UseFilters, UseInterceptors} from '@nestjs/common'
import debug from 'debug'
import {Bot, Context, InlineKeyboard} from 'grammy'

import {BotName} from "@modules/bot/bot.constants";
import {ResponseTimeInterceptor} from "@common/interceptors";
import {GrammyExceptionFilter} from "@common/filters";
import {PrismaService} from "@common/services/prisma.service";
import {formatExpire, prettyLevel} from "@common/utils";

const log = debug('bot:main')

@Update()
@UseInterceptors(ResponseTimeInterceptor)
@UseFilters(GrammyExceptionFilter)
export class BotService {
    constructor(
        @InjectBot(BotName)
        private readonly bot: Bot<Context>,
        private prisma: PrismaService,
    ) {
        log(`Initializing`, bot.isInited() ? bot.botInfo.first_name : '(pending)')
    }

    @Start()
    @ChatType('private')
    async onStart(@Ctx() ctx: Context): Promise<any> {
        const msg = ctx.message;
        if (!msg) return;

        const telegramId = msg.chat.id;
        if (!telegramId) return;

        const language = msg?.from?.language_code ?? 'ru'
        const username = msg?.chat.username
        const fullName = [msg?.chat.first_name, msg?.chat.last_name].filter(Boolean).join(' ')

        const text = msg.text ?? '';
        const [, payload] = text.startsWith('/start') || text.startsWith('start')
            ? text.split(' ') : [undefined, text];

        let user = await this.prisma.user.findUnique({where: {telegramId}})

        if (!user) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å payload –≤ –≤–∏–¥–µ ref_telegramId, –ø—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            if (payload && payload.startsWith('ref_')) {
                const inviterTelegramId = Number(payload.split('_')[1]);
                if (!isNaN(inviterTelegramId) && inviterTelegramId !== telegramId) {
                    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = await this.prisma.user.create({
                        data: {telegramId, username, fullName, language}
                    });

                    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
                    const inviter = await this.prisma.user.findUnique({where: {telegramId: inviterTelegramId}});
                    if (inviter) {
                        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                        await this.prisma.referral.create({
                            data: {
                                inviterId: inviter.id,
                                invitedId: user.id,
                            }
                        });
                        await this.bot.api.sendMessage(
                            inviter.telegramId,
                            `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${user.fullName || user.username || user.telegramId}</b> –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ!`,
                            {parse_mode: 'HTML'}
                        );
                    }
                }
            }
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ –Ω–æ–≤–æ–≥–æ
            if (!user) {
                user = await this.prisma.user.create({
                    data: {telegramId, username, fullName, language}
                });
            }
        } else {
            await this.prisma.user.update({
                where: {telegramId},
                data: {username, fullName, language},
            })
        }
        user = await this.prisma.user.findUniqueOrThrow({where: {id: user.id}})

        await ctx.reply(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.fullName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

üîπ –£—Ä–æ–≤–µ–Ω—å:<code> </code><b>${prettyLevel(user.level)}</b>
üéÅ –í–∞—à–∞ —Å–∫–∏–¥–∫–∞:<code> ${user.level == 'platinum' ? '100' : user.discount}%</code>
‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞:<code> ${user.expireAt ? (formatExpire(user.expireAt)) : '–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'}</code>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
            parse_mode: 'HTML',
            reply_markup: new InlineKeyboard()
                .text('üì¶ –ö—É–ø–∏—Ç—å', 'buy')
                .text('‚ú® –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è', 'con')
                .row()
                .text('üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', 'ref')
        })
    }


    // @Help()
    // async onHelp(@Ctx() ctx: Context): Promise<any> {
    //     return ctx.reply('Send me any text')
    // }

    // @Admin()
    // @UseGuards(AdminGuard)
    // async onAdminCommand(@Ctx() ctx: Context): Promise<any> {
    //     return ctx.reply('Welcome, Judge')
    // }
}

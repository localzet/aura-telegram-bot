import {ChatType, Command, Ctx, InjectBot, Start, Update,} from "@localzet/grammy-nestjs";
import {UseFilters, UseGuards, UseInterceptors} from "@nestjs/common";
import debug from "debug";
import {Bot, Context, InlineKeyboard} from "grammy";

import {BotName} from "@modules/bot/bot.constants";
import {ResponseTimeInterceptor} from "@common/interceptors";
import {GrammyExceptionFilter} from "@common/filters";
import {PrismaService} from "@common/services/prisma.service";
import {formatExpire, prettyLevel} from "@common/utils";
import {UserService} from "@common/services/user.service";
import {ConfigService} from "@nestjs/config";
import {AdminGuard} from "@common/guards";
import {AxiosService} from "@common/axios";

const log = debug("bot:main");

@Update()
@UseInterceptors(ResponseTimeInterceptor)
@UseFilters(GrammyExceptionFilter)
export class BotService {
    constructor(
        @InjectBot(BotName)
        private readonly bot: Bot<Context>,
        private prisma: PrismaService,
        private user: UserService,
        private config: ConfigService,
        private readonly axios: AxiosService,
    ) {
        log(
            "Initializing bot, status:",
            bot.isInited() ? bot.botInfo.first_name : "(pending)",
        );
    }

    @Start()
    @ChatType("private")
    async onStart(@Ctx() ctx: Context): Promise<any> {
        const msg = ctx.message;
        if (!msg) {
            log("onStart: no message in context");
            return;
        }

        const telegramId = msg.chat.id;
        if (!telegramId) {
            log("onStart: no telegramId");
            return;
        }

        const text = msg.text ?? "";
        const [, payload] =
            text.startsWith("/start") || text.startsWith("start")
                ? text.split(" ")
                : [undefined, text];

        log(`onStart: telegramId=${telegramId}, payload=${payload}`);

        const exists = await this.prisma.user.findUnique({where: {telegramId}});
        let inviter = undefined;

        if (!exists) {
            if (payload?.startsWith("ref_")) {
                const inviterTelegramId = Number(payload.split("_")[1]);
                if (!isNaN(inviterTelegramId) && inviterTelegramId !== telegramId) {
                    log(
                        `onStart: Registering new user with inviter ${inviterTelegramId}`,
                    );
                    inviter = await this.prisma.user.findUnique({
                        where: {telegramId: inviterTelegramId},
                    });
                }
            }

            if (!inviter) {
                await ctx.reply(
                    'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.');
                return;
            }
        }

        const {tg: user, aura: auraUser} = await this.user.getUser(ctx);
        if (inviter) {
            await this.prisma.referral.create({
                data: {
                    inviterId: inviter.id,
                    invitedId: user.id,
                },
            });
            log(`Referral recorded: inviterId=${inviter.id}, invitedId=${user.id}`);
        }

        const kb = new InlineKeyboard().text(
            `üì¶ ${user.auraId ? "–ü—Ä–æ–¥–ª–∏—Ç—å" : "–ö—É–ø–∏—Ç—å"}`,
            "buy",
        );
        if (auraUser) {
            const sub = await this.axios.getSubscriptionInfo(auraUser.shortUuid);
            if (sub.isOk && sub.response) {
                kb.webApp(
                    "‚ú® –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                    sub.response?.response.subscriptionUrl ?? "",
                );
            }
        }
        kb.row().text("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", "ref");

        await ctx.reply(
            `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.fullName || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}!
        
üîπ –£—Ä–æ–≤–µ–Ω—å:<code> </code><b>${prettyLevel(user.level)}</b>
‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞:<code> ${auraUser?.expireAt ? formatExpire(auraUser.expireAt) : "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"}</code>
        
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            {
                parse_mode: "HTML",
                reply_markup: kb,
            },
        );

        log(`onStart: greeting sent to ${telegramId}`);
    }

    async sendMessage(
        chatId: string | number,
        text: string,
        other?: any | undefined,
    ) {
        return this.bot.api.sendMessage(chatId, text, other);
    }

    @Command("help")
    @ChatType("private")
    async onHelp(@Ctx() ctx: Context): Promise<any> {
        const msg = ctx.message?.text ?? "";
        const args = msg.split(" ").slice(1).join(" ").trim();

        if (!args) {
            return ctx.reply(
                "üìñ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É:\n" +
                "<code>/help –≤–∞—à_—Ç–µ–∫—Å—Ç</code>\n\n" +
                "–ü—Ä–∏–º–µ—Ä:\n<code>/help –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø–ª–∞—Ç–∞</code>",
                {parse_mode: "HTML"},
            );
        }

        const helpChatId = this.config.getOrThrow<number>("ADMIN_TG_ID");

        await this.bot.api.sendMessage(
            helpChatId,
            "üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n" +
            `ID: <code>${ctx.from?.id}</code>\n` +
            `–ò–º—è: ${ctx.from?.first_name || ""} ${ctx.from?.last_name || ""}\n` +
            (ctx.from?.username ? `@${ctx.from.username}\n` : "") +
            `\n${args}`,
            {parse_mode: "HTML"},
        );
        return ctx.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.");
    }

    @Command("reply")
    @UseGuards(AdminGuard)
    async onReply(@Ctx() ctx: Context): Promise<any> {
        const msg = ctx.message?.text ?? "";
        const parts = msg.split(" ").slice(1);
        const userId = Number(parts.shift());
        const replyText = parts.join(" ").trim();

        if (!userId || !replyText) {
            return ctx.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply <user_id> <—Ç–µ–∫—Å—Ç>");
        }

        try {
            await this.bot.api.sendMessage(userId!, replyText);
            return ctx.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
        } catch (e) {
            return ctx.reply(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: ${e}`);
        }
    }
}

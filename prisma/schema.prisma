generator client {
  provider = "prisma-client-js"
}

enum UserLevel {
  ferrum
  argentum
  aurum
  platinum
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  telegramId BigInt       @unique
  auraId     String?   @unique
  level      UserLevel @default(ferrum)

  username String?
  fullName String?
  language String

  referrals   Referral[] @relation("InviterReferrals")
  invitedBy   Referral?  @relation("InvitedReferral")
  invitedById String?    @unique

  discount          Int       @default(0)
  discountExpiresAt DateTime?

  grantedArgentum Int @default(0)
  grantedAurum    Int @default(0)
  grantedPlatinum Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  purchase Purchase[]
}

model Referral {
  id String @id @default(uuid())

  inviter   User   @relation("InviterReferrals", fields: [inviterId], references: [id])
  inviterId String

  invited   User   @relation("InvitedReferral", fields: [invitedId], references: [id])
  invitedId String @unique

  createdAt DateTime @default(now())

  @@unique([inviterId, invitedId])
}

enum PurchaseType {
  crypto
  yookasa
  telegram
}

enum PurchaseStatus {
  new
  pending
  paid
  cancel
}

model Purchase {
  id       String         @id @default(uuid())
  userId   String
  type     PurchaseType
  status   PurchaseStatus
  amount   Float
  currency String
  month    Int

  telegramId String?
  yookasaId  String?

  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}
